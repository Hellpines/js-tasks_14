// 1. На вход подается строка в виде числа. Необходимо написать регулярное
// выражение. Если строка состоит только из чисел, то вывести булевое true, в
// противном случае бросить исключение и обработать

// let regular = /^[0-9]*$/gm;
// const num = '113231m23';

// function func(num){
//     return regular.test(num);
// }
// console.log(func(num))

// 2. На вход подается строка вида “имя фамилия возраст”. Необходимо написать
// регулярное выражение для данной строки. Если же строка подходит под
// регулярное выражение, то вывести булевое true, в противном случае бросить
// исключение и обработать

// let regular = /^[a-zA-Zа-яА-Я]+ [a-zA-Zа-яА-Я]+ \d{1,3}$/;
// const num = 'Ilya Tolstenkov 181';

// function func(num){
//     return regular.test(num);
// }
// console.log(func(num))

// 3. На вход подается строка из 2 и более слов. Необходимо все символы пробела
// заменить на пустую строку.

// const str = 'asd asdgfdf gdfgdf';

// function func(){
//     return str.replaceAll(' ', '');
// }
// console.log(func())

// 4. На вход подается строка в виде электронной почты пользователя. Необходимо
// написать регулярное выражение для данной строки. Если же строка подходит под
// регулярное выражение, то вывести булевое true, в противном случае бросить
// исключение и обработать

// const email = 'tolstenkov.ilya@mail.ru';
// let regular = /^[\.a-zA-Z]+@[a-zA-z]{1,10}\.[a-z]+$/gm;

// function func(){
//     return regular.test(email);
// }
// console.log(func());

// 5. На вход подается строка в виде url. Необходимо написать регулярное выражение
// для данной строки. Если же строка подходит под регулярное выражение, то
// вывести булевое true, в противном случае бросить исключение и обработать

// const url = 'https://regex101.com/';
// let regular = /(https|http):\/\/[\w\.\-]*\/{0,1}$/gm;

// function func(){
//     return regular.test(url);
// }
// console.log(func());

// 6. На вход подается строка вида: путь к файлу. Необходимо написать регулярное
// выражение для данной строки. Если же строка подходит под регулярное
// выражение, то вывести булевое true, в противном случае бросить исключение и
// обработать
// C:\Users\Admin\Desktop\test.txt -> true
// C:/Users/Admin/Desktop/test.txt -> true

// const way = 'C:\\Users\\Admin\\Desktop\\test.txt';
// let regular = /^[A-Z]:(\/|\\)\w+(\/|\\)\w+(\/|\\)\w+(\/|\\)\w+\.[a-zA-Z]+$/gm;

// function func(){
//     return regular.test(way);
// }
// console.log(func())

// 7. На вход подается строка в виде пароля. Необходимо написать регулярное
// выражение для данной строки. Если же строка подходит под регулярное
// выражение, то вывести булевое true, в противном случае бросить исключение и
// обработать.
// Пароль должен содержать:
// • Буквы в UPPER регистре
// • Буквы в LOWER регистре
// • Числа
// • Специальные символы
// • Длина не менее 8 символов

// const password = 'Qwert123%32'
// let regular = /^[\w\%\&\!\?\*\+\)\(]{8,}$/gm;

// function func(){
//     return regular.test(password);
// }
// console.log(func());

// 8. Дана строка состоящая из чисел, букв, специальных символов. Необходимо
// оставить в строке только буквенные символы используя регулярные выражения.
// Если же длина исходной строки изменилась, вывести true, в противном случае
// бросить исключение и обработать

// let str = '123fdsf%^234';

// function func(){
//     return str.replaceAll(/[\%\^\&\$\#\?\(\)\:\№\!\"0-9]/gm, '')
// }
// console.log(func())

// 9. Банкоматы позволяют использовать 4 или 6 значные PIN-коды, а PIN-коды не
// могут содержать ничего, кроме ровно 4 или ровно 6 цифр. Необходимо написать
// регулярное выражение для данной строки. Если же строка подходит под
// регулярное выражение, то вывести булевое true, в противном случае бросить
// исключение и обработать
// "1234“ -> true
// // "12345“ -> false
// "a234“ -> false

// const pin = '1234';
// let regular = /(^[0-9]{4}$|^[0-9]{6}$)/gm;

// function func(){
//     return regular.test(pin);
// }
// console.log(func())

// 10. Неопытный Junior запушил в GitHub html файл с комментариями. Team Lead не
// оценил использование комментариев в ветке development и попросил их убрать.
// Вырезая куски кода вы поняли, что их чересчур много. Необходимо написать
// регулярное выражение, которое вырежет все комментарии из html разметки
// <!-- -->

let comm = `<p>asdfasdfasdfasf</p>
    <!-- <h1>fasdfasdf</h1> -->`;
let regular = /\<\!\-\- \<\w+\>\w+\<\/\w+\> \-\-\>/gm;

function func(){
    return comm.replaceAll(regular, '');
}
console.log(func())
